include:
 - remote: 'https://gitlab.com/neuvector/gitlab-plugin/-/raw/master/scan.yml'

stages:
  - integrate
  - package
  - scan
  # - deploy

variables:
  # defined in GitLab project configuration (Settings > CI/CD > Variables)
  # CONTAINER_REGISTRY_PASSWD
  # CONTAINER_REGISTRY_USER
  # CONTAINER_REGISTRY_DOMAIN
  # CONTAINER_REGISTRY_FOLDER
  # container information
  CONTAINER_REPOSITORY: "$CONTAINER_REGISTRY_DOMAIN/$CONTAINER_REGISTRY_FOLDER/ecorp-backend-demo"
  CONTAINER_APP_VERSION: "1.0.$CI_PIPELINE_ID"

code-quality:
  image: mcr.microsoft.com/dotnet/sdk:6.0
  stage: integrate
  before_script:
    # dotnet cli tools
    - dotnet tool install -g dotnet-format --version "6.*" --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json
    - export PATH="$PATH:/root/.dotnet/tools"
  script:
    # lint
    - dotnet-format --verify-no-changes --severity warn --verbosity:diagnostic
    # build
    - dotnet restore
    - dotnet build --no-restore --configuration Debug
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
      allow_failure: true

container-image:
  image: docker:19.03.13
  services:
    - docker:19.03.13-dind
  stage: package
  before_script:
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27215
    # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27306
    - until docker info; do sleep 1; done
  script:
    - docker build . -t $CONTAINER_REPOSITORY:$CONTAINER_APP_VERSION -f src/WebApi/Dockerfile
    - docker login -u $CONTAINER_REGISTRY_USER -p $CONTAINER_REGISTRY_PASSWD $CONTAINER_REGISTRY_DOMAIN
    - docker save -o images.tar $CONTAINER_REPOSITORY:$CONTAINER_APP_VERSION
    - if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then docker push $CONTAINER_REPOSITORY:$CONTAINER_APP_VERSION; fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
  tags:
    - docker
  timeout: 30 minutes
  artifacts:
    expire_in: 1 hours
    paths:
      - images.tar
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

neuvector_scan:
  stage: scan
  variables:
    #image_registry_url: "https://registry-1.docker.io"
    #image_registry_user: $CONTAINER_REGISTRY_USER
    #image_registry_password: $CONTAINER_REGISTRY_PASSWD
    scan_local_image: "true"
    image_tar: "images.tar"
    image_repo: $CONTAINER_REPOSITORY
    image_tag: $CONTAINER_APP_VERSION
    nv_registry_url: "https://$CONTAINER_REGISTRY_DOMAIN"
    nv_registry_user: $CONTAINER_REGISTRY_USER
    nv_registry_password: $CONTAINER_REGISTRY_PASSWD
    scan_layers: "false"
    #official images from Microsoft (https://github.com/dotnet/dotnet-docker): to be reviewed
    high_vul_to_fail: 15
    medium_vul_to_fail: 9
    vul_names_to_fail: "CVE-2020-1971, CVE-2020-1972"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - apk add curl
    - apk add jq
    - until docker info; do sleep 1; done
  tags:
    - docker
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual
